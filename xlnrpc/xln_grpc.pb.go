// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: xln.proto

package xlnrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XlnClient is the client API for Xln service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XlnClient interface {
	//
	//Get general info about XLN
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error)
	DeleteWallet(ctx context.Context, in *DeleteWalletRequest, opts ...grpc.CallOption) (*DeleteWalletResponse, error)
	UpdateWalletOptions(ctx context.Context, in *UpdateWalletOptionsRequest, opts ...grpc.CallOption) (*UpdateWalletOptionsResponse, error)
	ListWallets(ctx context.Context, in *ListWalletsRequest, opts ...grpc.CallOption) (*ListWalletsResponse, error)
	GetWallet(ctx context.Context, in *GetWalletRequest, opts ...grpc.CallOption) (*GetWalletResponse, error)
	ListWalletTransactions(ctx context.Context, in *ListWalletTransactionsRequest, opts ...grpc.CallOption) (*ListWalletTransactionsResponse, error)
	GetWalletTransaction(ctx context.Context, in *GetWalletTransactionRequest, opts ...grpc.CallOption) (*GetWalletTransactionResponse, error)
	CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error)
	ListWalletInvoices(ctx context.Context, in *ListWalletInvoicesRequest, opts ...grpc.CallOption) (*ListWalletInvoicesResponse, error)
	GetWalletInvoice(ctx context.Context, in *GetWalletInvoiceRequest, opts ...grpc.CallOption) (*GetWalletInvoiceResponse, error)
	PayInvoice(ctx context.Context, in *PayInvoiceRequest, opts ...grpc.CallOption) (*PayInvoiceResponse, error)
	PayInvoiceSync(ctx context.Context, in *PayInvoiceRequest, opts ...grpc.CallOption) (*PayInvoiceSyncResponse, error)
	ListWalletPendingInvoices(ctx context.Context, in *ListWalletPendingInvoicesRequest, opts ...grpc.CallOption) (*ListWalletPendingInvoicesResponse, error)
	ListWalletPendingPayments(ctx context.Context, in *ListWalletPendingPaymentsRequest, opts ...grpc.CallOption) (*ListWalletPendingPaymentsResponse, error)
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	ListUserTransactions(ctx context.Context, in *ListUserTransactionsRequest, opts ...grpc.CallOption) (*ListUserTransactionsResponse, error)
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	UserLinkWallet(ctx context.Context, in *UserLinkWalletRequest, opts ...grpc.CallOption) (*UserLinkWalletResponse, error)
	LinkWallet(ctx context.Context, in *LinkWalletRequest, opts ...grpc.CallOption) (*LinkWalletResponse, error)
	UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
	WalletLogin(ctx context.Context, in *WalletLoginRequest, opts ...grpc.CallOption) (*WalletLoginResponse, error)
	LoginStatus(ctx context.Context, in *LoginStatusRequest, opts ...grpc.CallOption) (*LoginStatusResponse, error)
	CreateLNURLW(ctx context.Context, in *CreateLNURLWRequest, opts ...grpc.CallOption) (*CreateLNURLWResponse, error)
	GetLNURLW(ctx context.Context, in *GetLNURLWRequest, opts ...grpc.CallOption) (*GetLNURLWResponse, error)
}

type xlnClient struct {
	cc grpc.ClientConnInterface
}

func NewXlnClient(cc grpc.ClientConnInterface) XlnClient {
	return &xlnClient{cc}
}

func (c *xlnClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error) {
	out := new(CreateWalletResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/CreateWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) DeleteWallet(ctx context.Context, in *DeleteWalletRequest, opts ...grpc.CallOption) (*DeleteWalletResponse, error) {
	out := new(DeleteWalletResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/DeleteWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) UpdateWalletOptions(ctx context.Context, in *UpdateWalletOptionsRequest, opts ...grpc.CallOption) (*UpdateWalletOptionsResponse, error) {
	out := new(UpdateWalletOptionsResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/UpdateWalletOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) ListWallets(ctx context.Context, in *ListWalletsRequest, opts ...grpc.CallOption) (*ListWalletsResponse, error) {
	out := new(ListWalletsResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/ListWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) GetWallet(ctx context.Context, in *GetWalletRequest, opts ...grpc.CallOption) (*GetWalletResponse, error) {
	out := new(GetWalletResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/GetWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) ListWalletTransactions(ctx context.Context, in *ListWalletTransactionsRequest, opts ...grpc.CallOption) (*ListWalletTransactionsResponse, error) {
	out := new(ListWalletTransactionsResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/ListWalletTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) GetWalletTransaction(ctx context.Context, in *GetWalletTransactionRequest, opts ...grpc.CallOption) (*GetWalletTransactionResponse, error) {
	out := new(GetWalletTransactionResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/GetWalletTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error) {
	out := new(CreateInvoiceResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/CreateInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) ListWalletInvoices(ctx context.Context, in *ListWalletInvoicesRequest, opts ...grpc.CallOption) (*ListWalletInvoicesResponse, error) {
	out := new(ListWalletInvoicesResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/ListWalletInvoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) GetWalletInvoice(ctx context.Context, in *GetWalletInvoiceRequest, opts ...grpc.CallOption) (*GetWalletInvoiceResponse, error) {
	out := new(GetWalletInvoiceResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/GetWalletInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) PayInvoice(ctx context.Context, in *PayInvoiceRequest, opts ...grpc.CallOption) (*PayInvoiceResponse, error) {
	out := new(PayInvoiceResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/PayInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) PayInvoiceSync(ctx context.Context, in *PayInvoiceRequest, opts ...grpc.CallOption) (*PayInvoiceSyncResponse, error) {
	out := new(PayInvoiceSyncResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/PayInvoiceSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) ListWalletPendingInvoices(ctx context.Context, in *ListWalletPendingInvoicesRequest, opts ...grpc.CallOption) (*ListWalletPendingInvoicesResponse, error) {
	out := new(ListWalletPendingInvoicesResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/ListWalletPendingInvoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) ListWalletPendingPayments(ctx context.Context, in *ListWalletPendingPaymentsRequest, opts ...grpc.CallOption) (*ListWalletPendingPaymentsResponse, error) {
	out := new(ListWalletPendingPaymentsResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/ListWalletPendingPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) ListUserTransactions(ctx context.Context, in *ListUserTransactionsRequest, opts ...grpc.CallOption) (*ListUserTransactionsResponse, error) {
	out := new(ListUserTransactionsResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/ListUserTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) UserLinkWallet(ctx context.Context, in *UserLinkWalletRequest, opts ...grpc.CallOption) (*UserLinkWalletResponse, error) {
	out := new(UserLinkWalletResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/UserLinkWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) LinkWallet(ctx context.Context, in *LinkWalletRequest, opts ...grpc.CallOption) (*LinkWalletResponse, error) {
	out := new(LinkWalletResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/LinkWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) WalletLogin(ctx context.Context, in *WalletLoginRequest, opts ...grpc.CallOption) (*WalletLoginResponse, error) {
	out := new(WalletLoginResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/WalletLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) LoginStatus(ctx context.Context, in *LoginStatusRequest, opts ...grpc.CallOption) (*LoginStatusResponse, error) {
	out := new(LoginStatusResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/LoginStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) CreateLNURLW(ctx context.Context, in *CreateLNURLWRequest, opts ...grpc.CallOption) (*CreateLNURLWResponse, error) {
	out := new(CreateLNURLWResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/CreateLNURLW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xlnClient) GetLNURLW(ctx context.Context, in *GetLNURLWRequest, opts ...grpc.CallOption) (*GetLNURLWResponse, error) {
	out := new(GetLNURLWResponse)
	err := c.cc.Invoke(ctx, "/xlnrpc.Xln/GetLNURLW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XlnServer is the server API for Xln service.
// All implementations must embed UnimplementedXlnServer
// for forward compatibility
type XlnServer interface {
	//
	//Get general info about XLN
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error)
	DeleteWallet(context.Context, *DeleteWalletRequest) (*DeleteWalletResponse, error)
	UpdateWalletOptions(context.Context, *UpdateWalletOptionsRequest) (*UpdateWalletOptionsResponse, error)
	ListWallets(context.Context, *ListWalletsRequest) (*ListWalletsResponse, error)
	GetWallet(context.Context, *GetWalletRequest) (*GetWalletResponse, error)
	ListWalletTransactions(context.Context, *ListWalletTransactionsRequest) (*ListWalletTransactionsResponse, error)
	GetWalletTransaction(context.Context, *GetWalletTransactionRequest) (*GetWalletTransactionResponse, error)
	CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error)
	ListWalletInvoices(context.Context, *ListWalletInvoicesRequest) (*ListWalletInvoicesResponse, error)
	GetWalletInvoice(context.Context, *GetWalletInvoiceRequest) (*GetWalletInvoiceResponse, error)
	PayInvoice(context.Context, *PayInvoiceRequest) (*PayInvoiceResponse, error)
	PayInvoiceSync(context.Context, *PayInvoiceRequest) (*PayInvoiceSyncResponse, error)
	ListWalletPendingInvoices(context.Context, *ListWalletPendingInvoicesRequest) (*ListWalletPendingInvoicesResponse, error)
	ListWalletPendingPayments(context.Context, *ListWalletPendingPaymentsRequest) (*ListWalletPendingPaymentsResponse, error)
	Transfer(context.Context, *TransferRequest) (*TransferResponse, error)
	ListUserTransactions(context.Context, *ListUserTransactionsRequest) (*ListUserTransactionsResponse, error)
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	UserLinkWallet(context.Context, *UserLinkWalletRequest) (*UserLinkWalletResponse, error)
	LinkWallet(context.Context, *LinkWalletRequest) (*LinkWalletResponse, error)
	UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	WalletLogin(context.Context, *WalletLoginRequest) (*WalletLoginResponse, error)
	LoginStatus(context.Context, *LoginStatusRequest) (*LoginStatusResponse, error)
	CreateLNURLW(context.Context, *CreateLNURLWRequest) (*CreateLNURLWResponse, error)
	GetLNURLW(context.Context, *GetLNURLWRequest) (*GetLNURLWResponse, error)
	mustEmbedUnimplementedXlnServer()
}

// UnimplementedXlnServer must be embedded to have forward compatible implementations.
type UnimplementedXlnServer struct {
}

func (UnimplementedXlnServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedXlnServer) CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedXlnServer) DeleteWallet(context.Context, *DeleteWalletRequest) (*DeleteWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWallet not implemented")
}
func (UnimplementedXlnServer) UpdateWalletOptions(context.Context, *UpdateWalletOptionsRequest) (*UpdateWalletOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWalletOptions not implemented")
}
func (UnimplementedXlnServer) ListWallets(context.Context, *ListWalletsRequest) (*ListWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWallets not implemented")
}
func (UnimplementedXlnServer) GetWallet(context.Context, *GetWalletRequest) (*GetWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallet not implemented")
}
func (UnimplementedXlnServer) ListWalletTransactions(context.Context, *ListWalletTransactionsRequest) (*ListWalletTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletTransactions not implemented")
}
func (UnimplementedXlnServer) GetWalletTransaction(context.Context, *GetWalletTransactionRequest) (*GetWalletTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletTransaction not implemented")
}
func (UnimplementedXlnServer) CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (UnimplementedXlnServer) ListWalletInvoices(context.Context, *ListWalletInvoicesRequest) (*ListWalletInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletInvoices not implemented")
}
func (UnimplementedXlnServer) GetWalletInvoice(context.Context, *GetWalletInvoiceRequest) (*GetWalletInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletInvoice not implemented")
}
func (UnimplementedXlnServer) PayInvoice(context.Context, *PayInvoiceRequest) (*PayInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayInvoice not implemented")
}
func (UnimplementedXlnServer) PayInvoiceSync(context.Context, *PayInvoiceRequest) (*PayInvoiceSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayInvoiceSync not implemented")
}
func (UnimplementedXlnServer) ListWalletPendingInvoices(context.Context, *ListWalletPendingInvoicesRequest) (*ListWalletPendingInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletPendingInvoices not implemented")
}
func (UnimplementedXlnServer) ListWalletPendingPayments(context.Context, *ListWalletPendingPaymentsRequest) (*ListWalletPendingPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWalletPendingPayments not implemented")
}
func (UnimplementedXlnServer) Transfer(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedXlnServer) ListUserTransactions(context.Context, *ListUserTransactionsRequest) (*ListUserTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserTransactions not implemented")
}
func (UnimplementedXlnServer) Validate(context.Context, *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedXlnServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedXlnServer) UserLinkWallet(context.Context, *UserLinkWalletRequest) (*UserLinkWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLinkWallet not implemented")
}
func (UnimplementedXlnServer) LinkWallet(context.Context, *LinkWalletRequest) (*LinkWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkWallet not implemented")
}
func (UnimplementedXlnServer) UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedXlnServer) WalletLogin(context.Context, *WalletLoginRequest) (*WalletLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletLogin not implemented")
}
func (UnimplementedXlnServer) LoginStatus(context.Context, *LoginStatusRequest) (*LoginStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginStatus not implemented")
}
func (UnimplementedXlnServer) CreateLNURLW(context.Context, *CreateLNURLWRequest) (*CreateLNURLWResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLNURLW not implemented")
}
func (UnimplementedXlnServer) GetLNURLW(context.Context, *GetLNURLWRequest) (*GetLNURLWResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLNURLW not implemented")
}
func (UnimplementedXlnServer) mustEmbedUnimplementedXlnServer() {}

// UnsafeXlnServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XlnServer will
// result in compilation errors.
type UnsafeXlnServer interface {
	mustEmbedUnimplementedXlnServer()
}

func RegisterXlnServer(s grpc.ServiceRegistrar, srv XlnServer) {
	s.RegisterService(&Xln_ServiceDesc, srv)
}

func _Xln_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_DeleteWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).DeleteWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/DeleteWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).DeleteWallet(ctx, req.(*DeleteWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_UpdateWalletOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).UpdateWalletOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/UpdateWalletOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).UpdateWalletOptions(ctx, req.(*UpdateWalletOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_ListWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).ListWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/ListWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).ListWallets(ctx, req.(*ListWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_GetWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).GetWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/GetWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).GetWallet(ctx, req.(*GetWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_ListWalletTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).ListWalletTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/ListWalletTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).ListWalletTransactions(ctx, req.(*ListWalletTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_GetWalletTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).GetWalletTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/GetWalletTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).GetWalletTransaction(ctx, req.(*GetWalletTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/CreateInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).CreateInvoice(ctx, req.(*CreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_ListWalletInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).ListWalletInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/ListWalletInvoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).ListWalletInvoices(ctx, req.(*ListWalletInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_GetWalletInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).GetWalletInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/GetWalletInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).GetWalletInvoice(ctx, req.(*GetWalletInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_PayInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).PayInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/PayInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).PayInvoice(ctx, req.(*PayInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_PayInvoiceSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).PayInvoiceSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/PayInvoiceSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).PayInvoiceSync(ctx, req.(*PayInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_ListWalletPendingInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletPendingInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).ListWalletPendingInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/ListWalletPendingInvoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).ListWalletPendingInvoices(ctx, req.(*ListWalletPendingInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_ListWalletPendingPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWalletPendingPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).ListWalletPendingPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/ListWalletPendingPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).ListWalletPendingPayments(ctx, req.(*ListWalletPendingPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_ListUserTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).ListUserTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/ListUserTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).ListUserTransactions(ctx, req.(*ListUserTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_UserLinkWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLinkWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).UserLinkWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/UserLinkWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).UserLinkWallet(ctx, req.(*UserLinkWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_LinkWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).LinkWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/LinkWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).LinkWallet(ctx, req.(*LinkWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).UserLogin(ctx, req.(*UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_WalletLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).WalletLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/WalletLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).WalletLogin(ctx, req.(*WalletLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_LoginStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).LoginStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/LoginStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).LoginStatus(ctx, req.(*LoginStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_CreateLNURLW_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLNURLWRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).CreateLNURLW(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/CreateLNURLW",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).CreateLNURLW(ctx, req.(*CreateLNURLWRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Xln_GetLNURLW_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLNURLWRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XlnServer).GetLNURLW(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xlnrpc.Xln/GetLNURLW",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XlnServer).GetLNURLW(ctx, req.(*GetLNURLWRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Xln_ServiceDesc is the grpc.ServiceDesc for Xln service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Xln_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xlnrpc.Xln",
	HandlerType: (*XlnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _Xln_GetInfo_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _Xln_CreateWallet_Handler,
		},
		{
			MethodName: "DeleteWallet",
			Handler:    _Xln_DeleteWallet_Handler,
		},
		{
			MethodName: "UpdateWalletOptions",
			Handler:    _Xln_UpdateWalletOptions_Handler,
		},
		{
			MethodName: "ListWallets",
			Handler:    _Xln_ListWallets_Handler,
		},
		{
			MethodName: "GetWallet",
			Handler:    _Xln_GetWallet_Handler,
		},
		{
			MethodName: "ListWalletTransactions",
			Handler:    _Xln_ListWalletTransactions_Handler,
		},
		{
			MethodName: "GetWalletTransaction",
			Handler:    _Xln_GetWalletTransaction_Handler,
		},
		{
			MethodName: "CreateInvoice",
			Handler:    _Xln_CreateInvoice_Handler,
		},
		{
			MethodName: "ListWalletInvoices",
			Handler:    _Xln_ListWalletInvoices_Handler,
		},
		{
			MethodName: "GetWalletInvoice",
			Handler:    _Xln_GetWalletInvoice_Handler,
		},
		{
			MethodName: "PayInvoice",
			Handler:    _Xln_PayInvoice_Handler,
		},
		{
			MethodName: "PayInvoiceSync",
			Handler:    _Xln_PayInvoiceSync_Handler,
		},
		{
			MethodName: "ListWalletPendingInvoices",
			Handler:    _Xln_ListWalletPendingInvoices_Handler,
		},
		{
			MethodName: "ListWalletPendingPayments",
			Handler:    _Xln_ListWalletPendingPayments_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _Xln_Transfer_Handler,
		},
		{
			MethodName: "ListUserTransactions",
			Handler:    _Xln_ListUserTransactions_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _Xln_Validate_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Xln_GetUser_Handler,
		},
		{
			MethodName: "UserLinkWallet",
			Handler:    _Xln_UserLinkWallet_Handler,
		},
		{
			MethodName: "LinkWallet",
			Handler:    _Xln_LinkWallet_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _Xln_UserLogin_Handler,
		},
		{
			MethodName: "WalletLogin",
			Handler:    _Xln_WalletLogin_Handler,
		},
		{
			MethodName: "LoginStatus",
			Handler:    _Xln_LoginStatus_Handler,
		},
		{
			MethodName: "CreateLNURLW",
			Handler:    _Xln_CreateLNURLW_Handler,
		},
		{
			MethodName: "GetLNURLW",
			Handler:    _Xln_GetLNURLW_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xln.proto",
}
